{
	"info": {
		"_postman_id": "d984526f-c7d5-4beb-89b1-92c49509ed9e",
		"name": "Adventure Life – REST API",
		"description": "### **🌍 Adventure Life REST API**\n\nThe Adventure Life REST API provides backend functionality for a travel exploration platform. This Postman collection includes requests for:\n\n#### 🧭 Cities\n\n- List all cities\n    \n- Retrieve, create, update, and delete a city\n    \n\n#### 🎉 Events\n\n- List all events\n    \n- Retrieve, create, update, and delete an event\n    \n- Filter events by `cityId` or `userId`\n    \n\n#### 👤 Users\n\n- List all users\n    \n- Retrieve, create, update, and delete a user\n    \n\n#### 🌆 UserCity (join table)\n\n- View user-city associations\n    \n- Create or delete a user’s relationship with a city\n    \n\n---\n\nBuilt with **Node.js**, **TypeScript**, **Express**, **Objection.js**, and **PostgreSQL**. This collection mirrors the functionality documented in the Swagger UI (`/api-docs`).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20045145"
	},
	"item": [
		{
			"name": "Events",
			"item": [
				{
					"name": "GET /events – All Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should be an array\", function () {",
									"  const jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each event should have id, title, and city\", function () {",
									"  const jsonData = pm.response.json();",
									"  jsonData.forEach(event => {",
									"    pm.expect(event).to.have.property(\"id\");",
									"    pm.expect(event).to.have.property(\"title\");",
									"    pm.expect(event).to.have.property(\"city\");",
									"    pm.expect(event.city).to.have.property(\"id\");",
									"    pm.expect(event.city).to.have.property(\"name\");",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Returns a list of all events in the database.\nSupports optional query parameters such as `cityId` and `userId` for filtering."
					},
					"response": []
				},
				{
					"name": "GET /events/:id – Event by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"pm.test(\"Event is a valid object\", () => {",
									"    pm.expect(data).to.be.an(\"object\");",
									"    pm.expect(data).to.have.property(\"id\");",
									"    pm.expect(data).to.have.property(\"title\");",
									"    pm.expect(data).to.have.property(\"city\");",
									"    pm.expect(data.city).to.have.property(\"id\");",
									"    pm.expect(data.city).to.have.property(\"name\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/{{eventId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "Retrieves a single event by its unique ID.\nReturns full event details including `title`, `cityId`, and timestamps."
					},
					"response": []
				},
				{
					"name": "GET /events/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test(\"Returns not found error message\", () => {",
									"    pm.expect(data).to.be.an(\"object\");",
									"    pm.expect(data).to.have.property(\"error\");",
									"    pm.expect(data.error.toLowerCase()).to.include(\"no event found\");",
									"  });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"9999"
							]
						},
						"description": "Retrieves a single event by its unique ID.\nReturns full event details including `title`, `cityId`, and timestamps."
					},
					"response": []
				},
				{
					"name": "POST /events – Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json();",
									"pm.collectionVariables.set(\"newEventId\", data.id);",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Created event is a valid object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"title\");",
									"  pm.expect(data).to.have.property(\"cityId\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cityId\" : 5,\n    \"title\": \"Amber Museum\"\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Creates a new event.\nRequired fields:\n- `cityId` (integer) – ID of the city\n- `title` (string) – Title of the event"
					},
					"response": []
				},
				{
					"name": "PATCH /events/:id – Update Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Updated event is a valid object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"title\");",
									"  pm.expect(data).to.have.property(\"cityId\");",
									"  pm.expect(data).to.have.property(\"createdAt\");",
									"  pm.expect(data).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\" : \"Updated Event Title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/{{newEventId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{newEventId}}"
							]
						},
						"description": "Updates an existing event’s data by ID.\nSend only the fields you wish to update. Example: `title`, `cityId`."
					},
					"response": []
				},
				{
					"name": "PATCH /events/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No event found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\" : \"The BLUE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"9999"
							]
						},
						"description": "Updates an existing event’s data by ID.\nSend only the fields you wish to update. Example: `title`, `cityId`."
					},
					"response": []
				},
				{
					"name": "DELETE /events/:id – Delete Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains confirmation alert\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"alert\", \"Event Deleted\");",
									"});",
									"",
									"pm.test(\"Deleted event data is correct\", () => {",
									"  pm.expect(data).to.have.property(\"deletedEvent\");",
									"  pm.expect(data.deletedEvent).to.be.an(\"array\").that.has.lengthOf(1);",
									"",
									"  const deleted = data.deletedEvent[0];",
									"  pm.expect(deleted).to.have.property(\"id\");",
									"  pm.expect(deleted).to.have.property(\"title\");",
									"  pm.expect(deleted).to.have.property(\"cityId\");",
									"  pm.expect(deleted).to.have.property(\"createdAt\");",
									"  pm.expect(deleted).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/{{newEventId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"{{newEventId}}"
							]
						},
						"description": "Deletes the specified event by ID.\nThis action is irreversible."
					},
					"response": []
				},
				{
					"name": "DELETE /events/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No event found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"9999"
							]
						},
						"description": "Deletes the specified event by ID.\nThis action is irreversible."
					},
					"response": []
				},
				{
					"name": "GET /events?cityId= – Filter by City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response is an array of events\", () => {",
									"  pm.expect(data).to.be.an(\"array\");",
									"  pm.expect(data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each event has expected properties and correct cityId\", () => {",
									"  data.forEach((event) => {",
									"    pm.expect(event).to.have.property(\"id\");",
									"    pm.expect(event).to.have.property(\"title\");",
									"    pm.expect(event).to.have.property(\"cityId\", 1);",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/?cityId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								""
							],
							"query": [
								{
									"key": "cityId",
									"value": "1"
								}
							]
						},
						"description": "Returns a list of events filtered by the `cityId` query parameter."
					},
					"response": []
				},
				{
					"name": "GET /events with Invalid cityId – Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns an appropriate error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error.toLowerCase()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/?cityId=9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								""
							],
							"query": [
								{
									"key": "cityId",
									"value": "9999"
								}
							]
						},
						"description": "Returns a list of events filtered by the `cityId` query parameter."
					},
					"response": []
				},
				{
					"name": "GET /events?userId= – Filter by User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response is a user object with expected properties\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\", 2);",
									"  pm.expect(data).to.have.property(\"firstName\");",
									"  pm.expect(data).to.have.property(\"lastName\");",
									"  pm.expect(data).to.have.property(\"city\");",
									"});",
									"",
									"pm.test(\"User has an array of cities, each with events\", () => {",
									"  pm.expect(data.city).to.be.an(\"array\");",
									"  data.city.forEach((city) => {",
									"    pm.expect(city).to.have.property(\"name\");",
									"    pm.expect(city).to.have.property(\"event\");",
									"    pm.expect(city.event).to.be.an(\"array\");",
									"",
									"    city.event.forEach((event) => {",
									"      pm.expect(event).to.have.property(\"id\");",
									"      pm.expect(event).to.have.property(\"title\");",
									"    });",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/?userId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						},
						"description": "Returns a list of events associated with a specific user, using the `userId` query parameter."
					},
					"response": []
				},
				{
					"name": "GET /events with Invalid userd – Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns an appropriate error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error.toLowerCase()).to.include(\"not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/?userId=9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "9999"
								}
							]
						},
						"description": "Returns a list of events associated with a specific user, using the `userId` query parameter."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cities",
			"item": [
				{
					"name": "GET /cities – All Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cities list is an array with expected structure\", () => {",
									"  pm.expect(data).to.be.an(\"array\");",
									"  data.forEach((city) => {",
									"    pm.expect(city).to.have.property(\"id\");",
									"    pm.expect(city).to.have.property(\"name\");",
									"    pm.expect(city).to.have.property(\"country\");",
									"    pm.expect(city).to.have.property(\"event\").that.is.an(\"array\");",
									"",
									"    city.event.forEach((event) => {",
									"      pm.expect(event).to.have.property(\"id\");",
									"      pm.expect(event).to.have.property(\"title\");",
									"    });",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities"
							]
						},
						"description": "Retrieves all cities available in the system."
					},
					"response": []
				},
				{
					"name": "GET /cities/:id – City by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"City object has expected properties\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"name\");",
									"  pm.expect(data).to.have.property(\"country\");",
									"  pm.expect(data).to.have.property(\"event\").that.is.an(\"array\");",
									"",
									"  data.event.forEach((event) => {",
									"    pm.expect(event).to.have.property(\"id\");",
									"    pm.expect(event).to.have.property(\"title\");",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cities/{{cityId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"{{cityId}}"
							]
						},
						"description": "Fetches city details by ID.\nReturns name, country, and related data."
					},
					"response": []
				},
				{
					"name": "GET /cities/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No city found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cities/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"9999"
							]
						},
						"description": "Fetches city details by ID.\nReturns name, country, and related data."
					},
					"response": []
				},
				{
					"name": "POST /cities – Create City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json();",
									"pm.collectionVariables.set(\"newCityId\", data.id);",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Created city object has expected properties\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"name\");",
									"  pm.expect(data).to.have.property(\"country\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Los Angeles\",\n    \"country\": \"USA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities"
							]
						},
						"description": "Creates a new city.\nRequired fields:\n- `name` (string)\n- `country` (string)"
					},
					"response": []
				},
				{
					"name": "PATCH /cities/:id – Update City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated city object has expected properties\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"name\");",
									"  pm.expect(data).to.have.property(\"country\");",
									"  pm.expect(data).to.have.property(\"createdAt\");",
									"  pm.expect(data).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"LA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cities/{{newCityId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"{{newCityId}}"
							]
						},
						"description": "Updates an existing city by ID.\nPartial updates supported (e.g., `name` only)."
					},
					"response": []
				},
				{
					"name": "PATCH /cities/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No city found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"LA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cities/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"9999"
							]
						},
						"description": "Updates an existing city by ID.\nPartial updates supported (e.g., `name` only)."
					},
					"response": []
				},
				{
					"name": "DELETE /cities/:id – Delete City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has deletion alert and deletedCity details\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"alert\", \"City Deleted\");",
									"  pm.expect(data).to.have.property(\"deletedCity\").that.is.an(\"array\").with.lengthOf(1);",
									"  ",
									"  const city = data.deletedCity[0];",
									"  pm.expect(city).to.have.property(\"id\");",
									"  pm.expect(city).to.have.property(\"name\");",
									"  pm.expect(city).to.have.property(\"country\");",
									"  pm.expect(city).to.have.property(\"createdAt\");",
									"  pm.expect(city).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cities/{{newCityId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"{{newCityId}}"
							]
						},
						"description": "Deletes the specified city.\nEnsure it is not referenced by any events before deletion."
					},
					"response": []
				},
				{
					"name": "DELETE /cities/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No city found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/cities/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cities",
								"9999"
							]
						},
						"description": "Deletes the specified city.\nEnsure it is not referenced by any events before deletion."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GET /users – All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of users\", () => {",
									"  pm.expect(data).to.be.an(\"array\");",
									"  pm.expect(data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each user has expected properties\", () => {",
									"  data.forEach((user) => {",
									"    pm.expect(user).to.have.property(\"id\");",
									"    pm.expect(user).to.have.property(\"firstName\");",
									"    pm.expect(user).to.have.property(\"lastName\");",
									"    pm.expect(user).to.have.property(\"email\");",
									"    pm.expect(user).to.have.property(\"city\");",
									"    pm.expect(user.city).to.be.an(\"array\");",
									"",
									"    user.city.forEach((c) => {",
									"      pm.expect(c).to.have.property(\"name\");",
									"    });",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Retrieves all registered users in the system."
					},
					"response": []
				},
				{
					"name": "GET /users/:id – User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is a valid user object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"firstName\");",
									"  pm.expect(data).to.have.property(\"lastName\");",
									"  pm.expect(data).to.have.property(\"email\");",
									"  pm.expect(data).to.have.property(\"city\");",
									"  pm.expect(data.city).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each city has a name property\", () => {",
									"  data.city.forEach((c) => {",
									"    pm.expect(c).to.have.property(\"name\");",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Fetches user details by ID, including name and email."
					},
					"response": []
				},
				{
					"name": "GET /users/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No user found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9999"
							]
						},
						"description": "Fetches user details by ID, including name and email."
					},
					"response": []
				},
				{
					"name": "POST /users – Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json();",
									"pm.collectionVariables.set(\"newUserId\", data.id);",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is a valid user object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"firstName\");",
									"  pm.expect(data).to.have.property(\"lastName\");",
									"  pm.expect(data).to.have.property(\"email\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"NewUser\",\n  \"email\": \"TestNewUser99@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user.\nRequired fields:\n- `firstName` (string)\n- `lastName` (string)\n- `email` (string, unique)"
					},
					"response": []
				},
				{
					"name": "PATCH /users/:id – Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains updated user object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"firstName\");",
									"  pm.expect(data).to.have.property(\"lastName\");",
									"  pm.expect(data).to.have.property(\"email\");",
									"  pm.expect(data).to.have.property(\"createdAt\");",
									"  pm.expect(data).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"lastName\": \"UpdatedUserLastName\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{newUserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{newUserId}}"
							]
						},
						"description": "Updates user details.\nFields can be updated individually. Example: `lastName`."
					},
					"response": []
				},
				{
					"name": "PATCH /users/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No user found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"lastName\": \"Lemons2\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9999"
							]
						},
						"description": "Updates user details.\nFields can be updated individually. Example: `lastName`."
					},
					"response": []
				},
				{
					"name": "DELETE /users/:id – Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms user deletion\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"alert\", \"User Deleted\");",
									"  pm.expect(data).to.have.property(\"deletedUser\").that.is.an(\"array\").with.lengthOf(1);",
									"",
									"  const user = data.deletedUser[0];",
									"  pm.expect(user).to.have.property(\"id\");",
									"  pm.expect(user).to.have.property(\"email\");",
									"  pm.expect(user).to.have.property(\"firstName\");",
									"  pm.expect(user).to.have.property(\"lastName\");",
									"  pm.expect(user).to.have.property(\"createdAt\");",
									"  pm.expect(user).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{newUserId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{newUserId}}"
							]
						},
						"description": "Deletes a user by ID.\nUse with caution — this may affect linked records."
					},
					"response": []
				},
				{
					"name": "DELETE /users/:id– Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"No user found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9999"
							]
						},
						"description": "Deletes a user by ID.\nUse with caution — this may affect linked records."
					},
					"response": []
				}
			]
		},
		{
			"name": "userCity",
			"item": [
				{
					"name": "GET /user-cities – All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of user-city objects\", () => {",
									"  pm.expect(data).to.be.an(\"array\");",
									"  data.forEach((uc) => {",
									"    pm.expect(uc).to.be.an(\"object\");",
									"    pm.expect(uc).to.have.property(\"id\");",
									"    pm.expect(uc).to.have.property(\"userId\");",
									"    pm.expect(uc).to.have.property(\"cityId\");",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user-cities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-cities"
							]
						},
						"description": "Returns all user-city associations.\nUsed to determine which users are linked to which cities."
					},
					"response": []
				},
				{
					"name": "POST /user-cities – Create Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json();",
									"pm.collectionVariables.set(\"newUserCityId\", data.id);",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is a valid user-city object\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"id\");",
									"  pm.expect(data).to.have.property(\"userId\");",
									"  pm.expect(data).to.have.property(\"cityId\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\" : 2,\n    \"cityId\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-cities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-cities"
							]
						},
						"description": "Creates a new link between a user and a city.\nRequired fields:\n- `userId` (integer)\n- `cityId` (integer)"
					},
					"response": []
				},
				{
					"name": "DELETE /user-cities/:id – Remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status = pm.response.code;",
									"const data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns deleted user-city object and alert\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"alert\", \"User-City Deleted\");",
									"  pm.expect(data).to.have.property(\"deletedUserCity\").that.is.an(\"array\").with.length.greaterThan(0);",
									"",
									"  const userCity = data.deletedUserCity[0];",
									"  pm.expect(userCity).to.have.property(\"id\");",
									"  pm.expect(userCity).to.have.property(\"userId\");",
									"  pm.expect(userCity).to.have.property(\"cityId\");",
									"  pm.expect(userCity).to.have.property(\"createdAt\");",
									"  pm.expect(userCity).to.have.property(\"updatedAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user-cities/{{newUserCityId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-cities",
								"{{newUserCityId}}"
							]
						},
						"description": "Deletes a user-city relationship by ID."
					},
					"response": []
				},
				{
					"name": "DELETE /user-cities/:id – Not Found - Returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let data;",
									"try {",
									"  data = pm.response.json();",
									"} catch (e) {",
									"  console.error(\"Failed to parse response JSON\", e);",
									"}",
									"",
									"const status = pm.response.code;",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Returns a not found error message\", () => {",
									"  pm.expect(data).to.be.an(\"object\");",
									"  pm.expect(data).to.have.property(\"error\");",
									"  pm.expect(data.error).to.eql(\"User-city not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user-cities/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-cities",
								"9999"
							]
						},
						"description": "Deletes a user-city relationship by ID."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Ensure base_url is set",
					"if (!pm.collectionVariables.get(\"base_url\")) {",
					"  pm.collectionVariables.set(\"base_url\", \"http://localhost:3000/api/v1\");",
					"}",
					"",
					"// Initialize fallback test values if needed",
					"const defaults = {",
					"  userId: \"1\",",
					"  cityId: \"1\",",
					"  eventId: \"1\",",
					"  newUserId: \"123\",",
					"  newEventId: \"123\",",
					"  newCityId: \"123\",",
					"  newUserCityId: \"123\"",
					"};",
					"",
					"for (const [key, value] of Object.entries(defaults)) {",
					"  if (!pm.collectionVariables.get(key)) {",
					"    pm.collectionVariables.set(key, value);",
					"  }",
					"}",
					"",
					"console.log(\"🧪 Current collection variables:\");",
					"[\"newUserId\", \"newCityId\", \"newEventId\", \"newUserCityId\"].forEach(key => {",
					"  console.log(`${key}:`, pm.collectionVariables.get(key));",
					"});",
					"",
					"// Log request for debugging",
					"console.log(`🚀 ${pm.request.method} ${pm.request.url.toString()}`);",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "cityId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "newEventId",
			"value": "123",
			"type": "string"
		},
		{
			"key": "newUserId",
			"value": "123",
			"type": "string"
		},
		{
			"key": "newCityId",
			"value": "123",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "newUserCityId",
			"value": "123",
			"type": "default"
		}
	]
}